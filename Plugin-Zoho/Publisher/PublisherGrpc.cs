// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: publisher.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Diagnostics.CodeAnalysis;
using grpc = global::Grpc.Core;

namespace Pub {
  public static partial class Publisher
  {
    static readonly string __ServiceName = "pub.Publisher";

    static readonly grpc::Marshaller<global::Pub.ConnectRequest> __Marshaller_pub_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.ConnectResponse> __Marshaller_pub_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DiscoverShapesRequest> __Marshaller_pub_DiscoverShapesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DiscoverShapesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DiscoverShapesResponse> __Marshaller_pub_DiscoverShapesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DiscoverShapesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.PublishRequest> __Marshaller_pub_PublishRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.PublishRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.Record> __Marshaller_pub_Record = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.Record.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DisconnectRequest> __Marshaller_pub_DisconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DisconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Pub.DisconnectResponse> __Marshaller_pub_DisconnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Pub.DisconnectResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse> __Method_Connect = new grpc::Method<global::Pub.ConnectRequest, global::Pub.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_pub_ConnectRequest,
        __Marshaller_pub_ConnectResponse);

    static readonly grpc::Method<global::Pub.DiscoverShapesRequest, global::Pub.DiscoverShapesResponse> __Method_DiscoverShapes = new grpc::Method<global::Pub.DiscoverShapesRequest, global::Pub.DiscoverShapesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DiscoverShapes",
        __Marshaller_pub_DiscoverShapesRequest,
        __Marshaller_pub_DiscoverShapesResponse);

    static readonly grpc::Method<global::Pub.PublishRequest, global::Pub.Record> __Method_PublishStream = new grpc::Method<global::Pub.PublishRequest, global::Pub.Record>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PublishStream",
        __Marshaller_pub_PublishRequest,
        __Marshaller_pub_Record);

    static readonly grpc::Method<global::Pub.DisconnectRequest, global::Pub.DisconnectResponse> __Method_Disconnect = new grpc::Method<global::Pub.DisconnectRequest, global::Pub.DisconnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_pub_DisconnectRequest,
        __Marshaller_pub_DisconnectResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Pub.PublisherReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Publisher</summary>
    public abstract partial class PublisherBase
    {
      /// <summary>
      /// Instructs the publisher to connect to its data source.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.ConnectResponse> Connect(global::Pub.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Requests a listing of shapes this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.DiscoverShapesResponse> DiscoverShapes(global::Pub.DiscoverShapesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PublishString begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task PublishStream(global::Pub.PublishRequest request, grpc::IServerStreamWriter<global::Pub.Record> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Tells the publisher to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Pub.DisconnectResponse> Disconnect(global::Pub.DisconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Publisher</summary>
    public partial class PublisherClient : grpc::ClientBase<PublisherClient>
    {
      /// <summary>Creates a new client for Publisher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PublisherClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Publisher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PublisherClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PublisherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PublisherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Instructs the publisher to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConnectResponse Connect(global::Pub.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the publisher to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.ConnectResponse Connect(global::Pub.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Instructs the publisher to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConnectResponse> ConnectAsync(global::Pub.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instructs the publisher to connect to its data source.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.ConnectResponse> ConnectAsync(global::Pub.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      /// Requests a listing of shapes this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverShapesResponse DiscoverShapes(global::Pub.DiscoverShapesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverShapes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a listing of shapes this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DiscoverShapesResponse DiscoverShapes(global::Pub.DiscoverShapesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DiscoverShapes, null, options, request);
      }
      /// <summary>
      /// Requests a listing of shapes this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverShapesResponse> DiscoverShapesAsync(global::Pub.DiscoverShapesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DiscoverShapesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a listing of shapes this publisher can provide records for.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DiscoverShapesResponse> DiscoverShapesAsync(global::Pub.DiscoverShapesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DiscoverShapes, null, options, request);
      }
      /// <summary>
      /// PublishString begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> PublishStream(global::Pub.PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PublishString begins streaming records to the client from the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Pub.Record> PublishStream(global::Pub.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PublishStream, null, options, request);
      }
      /// <summary>
      /// Tells the publisher to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DisconnectResponse Disconnect(global::Pub.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tells the publisher to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Pub.DisconnectResponse Disconnect(global::Pub.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>
      /// Tells the publisher to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DisconnectResponse> DisconnectAsync(global::Pub.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tells the publisher to disconnect from its data source, stop any running publishes,
      /// and gracefully prepare to be shut down.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Pub.DisconnectResponse> DisconnectAsync(global::Pub.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PublisherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PublisherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PublisherBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_DiscoverShapes, serviceImpl.DiscoverShapes)
          .AddMethod(__Method_PublishStream, serviceImpl.PublishStream)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PublisherBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl.Connect);
      serviceBinder.AddMethod(__Method_DiscoverShapes, serviceImpl.DiscoverShapes);
      serviceBinder.AddMethod(__Method_PublishStream, serviceImpl.PublishStream);
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl.Disconnect);
    }

  }
}
#endregion
