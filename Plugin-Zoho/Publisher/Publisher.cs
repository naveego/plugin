// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: publisher.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Diagnostics.CodeAnalysis;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pub {
  /// <summary>Holder for reflection information generated from publisher.proto</summary>
  public static partial class PublisherReflection {

    #region Descriptor
    /// <summary>File descriptor for publisher.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PublisherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wdWJsaXNoZXIucHJvdG8SA3B1YiInCg5Db25uZWN0UmVxdWVzdBIVCg1z",
            "ZXR0aW5nc19qc29uGAIgASgJIhEKD0Nvbm5lY3RSZXNwb25zZSJfCg5QdWJs",
            "aXNoUmVxdWVzdBIZCgVzaGFwZRgBIAEoCzIKLnB1Yi5TaGFwZRINCgVsaW1p",
            "dBgCIAEoDRIjCgdmaWx0ZXJzGAMgAygLMhIucHViLlB1Ymxpc2hGaWx0ZXIi",
            "jwEKDVB1Ymxpc2hGaWx0ZXISJQoEa2luZBgBIAEoDjIXLnB1Yi5QdWJsaXNo",
            "RmlsdGVyLktpbmQSEwoLcHJvcGVydHlfaWQYAiABKAkSDQoFdmFsdWUYAyAB",
            "KAkiMwoES2luZBIKCgZFUVVBTFMQABINCglMRVNTX1RIQU4QARIQCgxHUkVB",
            "VEVSX1RIQU4QAiKZAQoVRGlzY292ZXJTaGFwZXNSZXF1ZXN0Ei0KBG1vZGUY",
            "ASABKA4yHy5wdWIuRGlzY292ZXJTaGFwZXNSZXF1ZXN0Lk1vZGUSHgoKdG9f",
            "cmVmcmVzaBgCIAMoCzIKLnB1Yi5TaGFwZRITCgtzYW1wbGVfc2l6ZRgEIAEo",
            "DSIcCgRNb2RlEgcKA0FMTBAAEgsKB1JFRlJFU0gQASI0ChZEaXNjb3ZlclNo",
            "YXBlc1Jlc3BvbnNlEhoKBnNoYXBlcxgBIAMoCzIKLnB1Yi5TaGFwZSLNAQoF",
            "U2hhcGUSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIhCgpwcm9wZXJ0aWVzGAQgAygLMg0ucHViLlByb3BlcnR5EhkK",
            "BWNvdW50GAUgASgLMgoucHViLkNvdW50EhsKBnNhbXBsZRgGIAMoCzILLnB1",
            "Yi5SZWNvcmQSDQoFcXVlcnkYByABKAkSGwoTcHVibGlzaGVyX21ldGFfanNv",
            "bhgIIAEoCRIOCgZlcnJvcnMYCSADKAkiZwoFQ291bnQSHQoEa2luZBgBIAEo",
            "DjIPLnB1Yi5Db3VudC5LaW5kEg0KBXZhbHVlGAIgASgFIjAKBEtpbmQSDwoL",
            "VU5BVkFJTEFCTEUQABIMCghFU1RJTUFURRABEgkKBUVYQUNUEAIi6gEKCFBy",
            "b3BlcnR5EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRp",
            "b24YAyABKAkSHwoEdHlwZRgEIAEoDjIRLnB1Yi5Qcm9wZXJ0eVR5cGUSDgoG",
            "aXNfa2V5GAUgASgIEhkKEWlzX2NyZWF0ZV9jb3VudGVyGAYgASgIEhkKEWlz",
            "X3VwZGF0ZV9jb3VudGVyGAcgASgIEhsKE3B1Ymxpc2hlcl9tZXRhX2pzb24Y",
            "CCABKAkSFgoOdHlwZV9hdF9zb3VyY2UYCSABKAkSEwoLaXNfbnVsbGFibGUY",
            "CiABKAgiEwoRRGlzY29ubmVjdFJlcXVlc3QiFAoSRGlzY29ubmVjdFJlc3Bv",
            "bnNlInkKBlJlY29yZBIiCgZhY3Rpb24YASABKA4yEi5wdWIuUmVjb3JkLkFj",
            "dGlvbhIRCglkYXRhX2pzb24YAiABKAkiOAoGQWN0aW9uEgoKBlVQU0VSVBAA",
            "EgoKBklOU0VSVBABEgoKBlVQREFURRACEgoKBkRFTEVURRADKpIBCgxQcm9w",
            "ZXJ0eVR5cGUSCgoGU1RSSU5HEAASCAoEQk9PTBACEgsKB0lOVEVHRVIQAxIJ",
            "CgVGTE9BVBAEEgsKB0RFQ0lNQUwQBRIICgREQVRFEAYSCAoEVElNRRAHEgwK",
            "CERBVEVUSU1FEAgSCAoEVEVYVBAJEggKBEJMT0IQChIICgRKU09OEAsSBwoD",
            "WE1MEAwyiAIKCVB1Ymxpc2hlchI2CgdDb25uZWN0EhMucHViLkNvbm5lY3RS",
            "ZXF1ZXN0GhQucHViLkNvbm5lY3RSZXNwb25zZSIAEksKDkRpc2NvdmVyU2hh",
            "cGVzEhoucHViLkRpc2NvdmVyU2hhcGVzUmVxdWVzdBobLnB1Yi5EaXNjb3Zl",
            "clNoYXBlc1Jlc3BvbnNlIgASNQoNUHVibGlzaFN0cmVhbRITLnB1Yi5QdWJs",
            "aXNoUmVxdWVzdBoLLnB1Yi5SZWNvcmQiADABEj8KCkRpc2Nvbm5lY3QSFi5w",
            "dWIuRGlzY29ubmVjdFJlcXVlc3QaFy5wdWIuRGlzY29ubmVjdFJlc3BvbnNl",
            "IgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pub.PropertyType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConnectRequest), global::Pub.ConnectRequest.Parser, new[]{ "SettingsJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.ConnectResponse), global::Pub.ConnectResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.PublishRequest), global::Pub.PublishRequest.Parser, new[]{ "Shape", "Limit", "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.PublishFilter), global::Pub.PublishFilter.Parser, new[]{ "Kind", "PropertyId", "Value" }, null, new[]{ typeof(global::Pub.PublishFilter.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DiscoverShapesRequest), global::Pub.DiscoverShapesRequest.Parser, new[]{ "Mode", "ToRefresh", "SampleSize" }, null, new[]{ typeof(global::Pub.DiscoverShapesRequest.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DiscoverShapesResponse), global::Pub.DiscoverShapesResponse.Parser, new[]{ "Shapes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Shape), global::Pub.Shape.Parser, new[]{ "Id", "Name", "Description", "Properties", "Count", "Sample", "Query", "PublisherMetaJson", "Errors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Count), global::Pub.Count.Parser, new[]{ "Kind", "Value" }, null, new[]{ typeof(global::Pub.Count.Types.Kind) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Property), global::Pub.Property.Parser, new[]{ "Id", "Name", "Description", "Type", "IsKey", "IsCreateCounter", "IsUpdateCounter", "PublisherMetaJson", "TypeAtSource", "IsNullable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DisconnectRequest), global::Pub.DisconnectRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.DisconnectResponse), global::Pub.DisconnectResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pub.Record), global::Pub.Record.Parser, new[]{ "Action", "DataJson" }, null, new[]{ typeof(global::Pub.Record.Types.Action) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PropertyType {
    /// <summary>
    /// Unicode string, less than 1024 characters.
    /// </summary>
    [pbr::OriginalName("STRING")] String = 0,
    /// <summary>
    /// true/false.
    /// </summary>
    [pbr::OriginalName("BOOL")] Bool = 2,
    /// <summary>
    /// 64-bit integer.
    /// </summary>
    [pbr::OriginalName("INTEGER")] Integer = 3,
    /// <summary>
    /// 64-bit floating point number.
    /// </summary>
    [pbr::OriginalName("FLOAT")] Float = 4,
    /// <summary>
    /// Absolute precision number of any size.
    /// </summary>
    [pbr::OriginalName("DECIMAL")] Decimal = 5,
    /// <summary>
    /// Date (no time).
    /// </summary>
    [pbr::OriginalName("DATE")] Date = 6,
    /// <summary>
    /// Time (no date).
    /// </summary>
    [pbr::OriginalName("TIME")] Time = 7,
    /// <summary>
    /// Datetime (date and time).
    /// </summary>
    [pbr::OriginalName("DATETIME")] Datetime = 8,
    /// <summary>
    /// Unicode string, more than 1024 characters.
    /// </summary>
    [pbr::OriginalName("TEXT")] Text = 9,
    /// <summary>
    /// Binary data as a base-64 encoded string.
    /// </summary>
    [pbr::OriginalName("BLOB")] Blob = 10,
    /// <summary>
    /// A JSON object as a string.
    /// </summary>
    [pbr::OriginalName("JSON")] Json = 11,
    /// <summary>
    /// An XML object as a string.
    /// </summary>
    [pbr::OriginalName("XML")] Xml = 12,
  }

  #endregion

  #region Messages
  public sealed partial class ConnectRequest : pb::IMessage<ConnectRequest> {
    private static readonly pb::MessageParser<ConnectRequest> _parser = new pb::MessageParser<ConnectRequest>(() => new ConnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest(ConnectRequest other) : this() {
      settingsJson_ = other.settingsJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRequest Clone() {
      return new ConnectRequest(this);
    }

    /// <summary>Field number for the "settings_json" field.</summary>
    public const int SettingsJsonFieldNumber = 2;
    private string settingsJson_ = "";
    /// <summary>
    /// The settings the publisher should use to connect, as a JSON string.
    /// The JSON will be based on the JSONSchema defined in the publisher's package.json.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettingsJson {
      get { return settingsJson_; }
      set {
        settingsJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SettingsJson != other.SettingsJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SettingsJson.Length != 0) hash ^= SettingsJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SettingsJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SettingsJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SettingsJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettingsJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRequest other) {
      if (other == null) {
        return;
      }
      if (other.SettingsJson.Length != 0) {
        SettingsJson = other.SettingsJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            SettingsJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConnectResponse has no data; if the connect fails, the plugin should return an error.
  /// </summary>
  public sealed partial class ConnectResponse : pb::IMessage<ConnectResponse> {
    private static readonly pb::MessageParser<ConnectResponse> _parser = new pb::MessageParser<ConnectResponse>(() => new ConnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse(ConnectResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectResponse Clone() {
      return new ConnectResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PublishRequest : pb::IMessage<PublishRequest> {
    private static readonly pb::MessageParser<PublishRequest> _parser = new pb::MessageParser<PublishRequest>(() => new PublishRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishRequest(PublishRequest other) : this() {
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      limit_ = other.limit_;
      filters_ = other.filters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishRequest Clone() {
      return new PublishRequest(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Pub.Shape shape_;
    /// <summary>
    /// The shape of the records to publish.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Shape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private uint limit_;
    /// <summary>
    /// Limit of number of records to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pub.PublishFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Pub.PublishFilter.Parser);
    private readonly pbc::RepeatedField<global::Pub.PublishFilter> filters_ = new pbc::RepeatedField<global::Pub.PublishFilter>();
    /// <summary>
    /// Zero or more filters which should be applied to the returned records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.PublishFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Limit != other.Limit) return false;
      if(!filters_.Equals(other.filters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Limit);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishRequest other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Pub.Shape();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      filters_.Add(other.filters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shape_ == null) {
              shape_ = new global::Pub.Shape();
            }
            input.ReadMessage(shape_);
            break;
          }
          case 16: {
            Limit = input.ReadUInt32();
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishFilter : pb::IMessage<PublishFilter> {
    private static readonly pb::MessageParser<PublishFilter> _parser = new pb::MessageParser<PublishFilter>(() => new PublishFilter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter(PublishFilter other) : this() {
      kind_ = other.kind_;
      propertyId_ = other.propertyId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishFilter Clone() {
      return new PublishFilter(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Pub.PublishFilter.Types.Kind kind_ = 0;
    /// <summary>
    /// Kind of the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.PublishFilter.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "property_id" field.</summary>
    public const int PropertyIdFieldNumber = 2;
    private string propertyId_ = "";
    /// <summary>
    /// The id of the property on each record which should be matched against the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyId {
      get { return propertyId_; }
      set {
        propertyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// The value of the which should be matched against the named property for each record, as a string.
    /// The publisher is responsible for converting the value to the correct type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (PropertyId != other.PropertyId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (PropertyId.Length != 0) hash ^= PropertyId.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (PropertyId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropertyId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (PropertyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyId);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishFilter other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.PropertyId.Length != 0) {
        PropertyId = other.PropertyId;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            kind_ = (global::Pub.PublishFilter.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            PropertyId = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PublishFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        /// <summary>
        /// The property on the record must equal the filter value.
        /// </summary>
        [pbr::OriginalName("EQUALS")] Equals = 0,
        /// <summary>
        /// The property on the record must be less than the filter value.
        /// </summary>
        [pbr::OriginalName("LESS_THAN")] LessThan = 1,
        /// <summary>
        /// The property on the record must be greater than the filter value.
        /// </summary>
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 2,
      }

    }
    #endregion

  }

  public sealed partial class DiscoverShapesRequest : pb::IMessage<DiscoverShapesRequest> {
    private static readonly pb::MessageParser<DiscoverShapesRequest> _parser = new pb::MessageParser<DiscoverShapesRequest>(() => new DiscoverShapesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverShapesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesRequest(DiscoverShapesRequest other) : this() {
      mode_ = other.mode_;
      toRefresh_ = other.toRefresh_.Clone();
      sampleSize_ = other.sampleSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesRequest Clone() {
      return new DiscoverShapesRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Pub.DiscoverShapesRequest.Types.Mode mode_ = 0;
    /// <summary>
    /// Mode is the discovery mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.DiscoverShapesRequest.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "to_refresh" field.</summary>
    public const int ToRefreshFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pub.Shape> _repeated_toRefresh_codec
        = pb::FieldCodec.ForMessage(18, global::Pub.Shape.Parser);
    private readonly pbc::RepeatedField<global::Pub.Shape> toRefresh_ = new pbc::RepeatedField<global::Pub.Shape>();
    /// <summary>
    /// The shapes to refresh if mode == 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Shape> ToRefresh {
      get { return toRefresh_; }
    }

    /// <summary>Field number for the "sample_size" field.</summary>
    public const int SampleSizeFieldNumber = 4;
    private uint sampleSize_;
    /// <summary>
    /// Size of the sample of records to include in the returned shapes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleSize {
      get { return sampleSize_; }
      set {
        sampleSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverShapesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverShapesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if(!toRefresh_.Equals(other.toRefresh_)) return false;
      if (SampleSize != other.SampleSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= toRefresh_.GetHashCode();
      if (SampleSize != 0) hash ^= SampleSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      toRefresh_.WriteTo(output, _repeated_toRefresh_codec);
      if (SampleSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SampleSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += toRefresh_.CalculateSize(_repeated_toRefresh_codec);
      if (SampleSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverShapesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      toRefresh_.Add(other.toRefresh_);
      if (other.SampleSize != 0) {
        SampleSize = other.SampleSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Pub.DiscoverShapesRequest.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            toRefresh_.AddEntriesFrom(input, _repeated_toRefresh_codec);
            break;
          }
          case 32: {
            SampleSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DiscoverShapesRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        /// <summary>
        /// ALL means all shapes the publisher can publish should be returned.
        /// </summary>
        [pbr::OriginalName("ALL")] All = 0,
        /// <summary>
        /// REFRESH means the publisher return (updated) shapes identified by the partial shapes included in to_refresh.
        /// </summary>
        [pbr::OriginalName("REFRESH")] Refresh = 1,
      }

    }
    #endregion

  }

  public sealed partial class DiscoverShapesResponse : pb::IMessage<DiscoverShapesResponse> {
    private static readonly pb::MessageParser<DiscoverShapesResponse> _parser = new pb::MessageParser<DiscoverShapesResponse>(() => new DiscoverShapesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscoverShapesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesResponse(DiscoverShapesResponse other) : this() {
      shapes_ = other.shapes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscoverShapesResponse Clone() {
      return new DiscoverShapesResponse(this);
    }

    /// <summary>Field number for the "shapes" field.</summary>
    public const int ShapesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pub.Shape> _repeated_shapes_codec
        = pb::FieldCodec.ForMessage(10, global::Pub.Shape.Parser);
    private readonly pbc::RepeatedField<global::Pub.Shape> shapes_ = new pbc::RepeatedField<global::Pub.Shape>();
    /// <summary>
    /// Shapes discovered by the publisher.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Shape> Shapes {
      get { return shapes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscoverShapesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscoverShapesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shapes_.Equals(other.shapes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shapes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shapes_.WriteTo(output, _repeated_shapes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shapes_.CalculateSize(_repeated_shapes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscoverShapesResponse other) {
      if (other == null) {
        return;
      }
      shapes_.Add(other.shapes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shapes_.AddEntriesFrom(input, _repeated_shapes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Shape : pb::IMessage<Shape> {
    private static readonly pb::MessageParser<Shape> _parser = new pb::MessageParser<Shape>(() => new Shape());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape(Shape other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      properties_ = other.properties_.Clone();
      count_ = other.count_ != null ? other.count_.Clone() : null;
      sample_ = other.sample_.Clone();
      query_ = other.query_;
      publisherMetaJson_ = other.publisherMetaJson_;
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape Clone() {
      return new Shape(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID that the plugin uses to uniquely identify this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of this shape (must be a permanant identifier which is unique in this source).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of this shape, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pub.Property> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(34, global::Pub.Property.Parser);
    private readonly pbc::RepeatedField<global::Pub.Property> properties_ = new pbc::RepeatedField<global::Pub.Property>();
    /// <summary>
    /// Properties of this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Property> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private global::Pub.Count count_;
    /// <summary>
    /// Count of records available in this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Count Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "sample" field.</summary>
    public const int SampleFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pub.Record> _repeated_sample_codec
        = pb::FieldCodec.ForMessage(50, global::Pub.Record.Parser);
    private readonly pbc::RepeatedField<global::Pub.Record> sample_ = new pbc::RepeatedField<global::Pub.Record>();
    /// <summary>
    /// Sample containing zero or more records representative of the data in this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pub.Record> Sample {
      get { return sample_; }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 7;
    private string query_ = "";
    /// <summary>
    /// When returned from a publisher, the optional query which can be passed to the publisher to publish records from this shape.
    /// When passed to the publisher, the query which should be used to publish records from this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher_meta_json" field.</summary>
    public const int PublisherMetaJsonFieldNumber = 8;
    private string publisherMetaJson_ = "";
    /// <summary>
    /// Arbitrary JSON blob containing information the publisher uses for things like change detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublisherMetaJson {
      get { return publisherMetaJson_; }
      set {
        publisherMetaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Errors that occurred while discovering this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (!object.Equals(Count, other.Count)) return false;
      if(!sample_.Equals(other.sample_)) return false;
      if (Query != other.Query) return false;
      if (PublisherMetaJson != other.PublisherMetaJson) return false;
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (count_ != null) hash ^= Count.GetHashCode();
      hash ^= sample_.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (PublisherMetaJson.Length != 0) hash ^= PublisherMetaJson.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (count_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Count);
      }
      sample_.WriteTo(output, _repeated_sample_codec);
      if (Query.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Query);
      }
      if (PublisherMetaJson.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PublisherMetaJson);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (count_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Count);
      }
      size += sample_.CalculateSize(_repeated_sample_codec);
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (PublisherMetaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherMetaJson);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shape other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      properties_.Add(other.properties_);
      if (other.count_ != null) {
        if (count_ == null) {
          count_ = new global::Pub.Count();
        }
        Count.MergeFrom(other.Count);
      }
      sample_.Add(other.sample_);
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.PublisherMetaJson.Length != 0) {
        PublisherMetaJson = other.PublisherMetaJson;
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 42: {
            if (count_ == null) {
              count_ = new global::Pub.Count();
            }
            input.ReadMessage(count_);
            break;
          }
          case 50: {
            sample_.AddEntriesFrom(input, _repeated_sample_codec);
            break;
          }
          case 58: {
            Query = input.ReadString();
            break;
          }
          case 66: {
            PublisherMetaJson = input.ReadString();
            break;
          }
          case 74: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Count : pb::IMessage<Count> {
    private static readonly pb::MessageParser<Count> _parser = new pb::MessageParser<Count>(() => new Count());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Count> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count(Count other) : this() {
      kind_ = other.kind_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Count Clone() {
      return new Count(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Pub.Count.Types.Kind kind_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Count.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Count);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Count other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Count other) {
      if (other == null) {
        return;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            kind_ = (global::Pub.Count.Types.Kind) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Count message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Kind {
        [pbr::OriginalName("UNAVAILABLE")] Unavailable = 0,
        [pbr::OriginalName("ESTIMATE")] Estimate = 1,
        [pbr::OriginalName("EXACT")] Exact = 2,
      }

    }
    #endregion

  }

  public sealed partial class Property : pb::IMessage<Property> {
    private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Property> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property(Property other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      type_ = other.type_;
      isKey_ = other.isKey_;
      isCreateCounter_ = other.isCreateCounter_;
      isUpdateCounter_ = other.isUpdateCounter_;
      publisherMetaJson_ = other.publisherMetaJson_;
      typeAtSource_ = other.typeAtSource_;
      isNullable_ = other.isNullable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property Clone() {
      return new Property(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID is the permanent, unique identifier for this property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name is an optional display name for the property.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of this property, if available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Pub.PropertyType type_ = 0;
    /// <summary>
    /// Type of the property. Use STRING if no other type matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.PropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "is_key" field.</summary>
    public const int IsKeyFieldNumber = 5;
    private bool isKey_;
    /// <summary>
    /// Set to true if this property is part of the primary key for this shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKey {
      get { return isKey_; }
      set {
        isKey_ = value;
      }
    }

    /// <summary>Field number for the "is_create_counter" field.</summary>
    public const int IsCreateCounterFieldNumber = 6;
    private bool isCreateCounter_;
    /// <summary>
    /// Set to true if this property is an orderable value which can be used
    /// to determine if one record was created more recently than another record.
    /// For example, a CreatedAt datetime column or an auto-incrementing integer primary key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreateCounter {
      get { return isCreateCounter_; }
      set {
        isCreateCounter_ = value;
      }
    }

    /// <summary>Field number for the "is_update_counter" field.</summary>
    public const int IsUpdateCounterFieldNumber = 7;
    private bool isUpdateCounter_;
    /// <summary>
    /// Set to true if this property is an orderable value which can be used
    /// to determine if one record was updated more recently than another record.
    /// For example, an UpdatedAt datetime column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpdateCounter {
      get { return isUpdateCounter_; }
      set {
        isUpdateCounter_ = value;
      }
    }

    /// <summary>Field number for the "publisher_meta_json" field.</summary>
    public const int PublisherMetaJsonFieldNumber = 8;
    private string publisherMetaJson_ = "";
    /// <summary>
    /// Arbitrary JSON blob containing information the publisher uses for things like change detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublisherMetaJson {
      get { return publisherMetaJson_; }
      set {
        publisherMetaJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type_at_source" field.</summary>
    public const int TypeAtSourceFieldNumber = 9;
    private string typeAtSource_ = "";
    /// <summary>
    /// The type of the property as defined in the source system. Used to provide
    /// human-readable hints when building mappings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeAtSource {
      get { return typeAtSource_; }
      set {
        typeAtSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_nullable" field.</summary>
    public const int IsNullableFieldNumber = 10;
    private bool isNullable_;
    /// <summary>
    /// Indicates that this property is nullable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNullable {
      get { return isNullable_; }
      set {
        isNullable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Property);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Property other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (IsKey != other.IsKey) return false;
      if (IsCreateCounter != other.IsCreateCounter) return false;
      if (IsUpdateCounter != other.IsUpdateCounter) return false;
      if (PublisherMetaJson != other.PublisherMetaJson) return false;
      if (TypeAtSource != other.TypeAtSource) return false;
      if (IsNullable != other.IsNullable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsKey != false) hash ^= IsKey.GetHashCode();
      if (IsCreateCounter != false) hash ^= IsCreateCounter.GetHashCode();
      if (IsUpdateCounter != false) hash ^= IsUpdateCounter.GetHashCode();
      if (PublisherMetaJson.Length != 0) hash ^= PublisherMetaJson.GetHashCode();
      if (TypeAtSource.Length != 0) hash ^= TypeAtSource.GetHashCode();
      if (IsNullable != false) hash ^= IsNullable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (IsKey != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsKey);
      }
      if (IsCreateCounter != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCreateCounter);
      }
      if (IsUpdateCounter != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsUpdateCounter);
      }
      if (PublisherMetaJson.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PublisherMetaJson);
      }
      if (TypeAtSource.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TypeAtSource);
      }
      if (IsNullable != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsNullable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (IsKey != false) {
        size += 1 + 1;
      }
      if (IsCreateCounter != false) {
        size += 1 + 1;
      }
      if (IsUpdateCounter != false) {
        size += 1 + 1;
      }
      if (PublisherMetaJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherMetaJson);
      }
      if (TypeAtSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeAtSource);
      }
      if (IsNullable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Property other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsKey != false) {
        IsKey = other.IsKey;
      }
      if (other.IsCreateCounter != false) {
        IsCreateCounter = other.IsCreateCounter;
      }
      if (other.IsUpdateCounter != false) {
        IsUpdateCounter = other.IsUpdateCounter;
      }
      if (other.PublisherMetaJson.Length != 0) {
        PublisherMetaJson = other.PublisherMetaJson;
      }
      if (other.TypeAtSource.Length != 0) {
        TypeAtSource = other.TypeAtSource;
      }
      if (other.IsNullable != false) {
        IsNullable = other.IsNullable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::Pub.PropertyType) input.ReadEnum();
            break;
          }
          case 40: {
            IsKey = input.ReadBool();
            break;
          }
          case 48: {
            IsCreateCounter = input.ReadBool();
            break;
          }
          case 56: {
            IsUpdateCounter = input.ReadBool();
            break;
          }
          case 66: {
            PublisherMetaJson = input.ReadString();
            break;
          }
          case 74: {
            TypeAtSource = input.ReadString();
            break;
          }
          case 80: {
            IsNullable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectRequest : pb::IMessage<DisconnectRequest> {
    private static readonly pb::MessageParser<DisconnectRequest> _parser = new pb::MessageParser<DisconnectRequest>(() => new DisconnectRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest(DisconnectRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectRequest Clone() {
      return new DisconnectRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DisconnectResponse : pb::IMessage<DisconnectResponse> {
    private static readonly pb::MessageParser<DisconnectResponse> _parser = new pb::MessageParser<DisconnectResponse>(() => new DisconnectResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse(DisconnectResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectResponse Clone() {
      return new DisconnectResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pub.PublisherReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      action_ = other.action_;
      dataJson_ = other.dataJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pub.Record.Types.Action action_ = 0;
    /// <summary>
    /// Action for this record. Default value is UPSERT if the plugin 
    /// cannot determine what the action should be relative to data alreay acquired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pub.Record.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "data_json" field.</summary>
    public const int DataJsonFieldNumber = 2;
    private string dataJson_ = "";
    /// <summary>
    /// Data for this record, as a JSON string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataJson {
      get { return dataJson_; }
      set {
        dataJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (DataJson != other.DataJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (DataJson.Length != 0) hash ^= DataJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (DataJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (DataJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.DataJson.Length != 0) {
        DataJson = other.DataJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pub.Record.Types.Action) input.ReadEnum();
            break;
          }
          case 18: {
            DataJson = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Record message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("UPSERT")] Upsert = 0,
        [pbr::OriginalName("INSERT")] Insert = 1,
        [pbr::OriginalName("UPDATE")] Update = 2,
        [pbr::OriginalName("DELETE")] Delete = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
